#+TITLE: Chu's Literate DOOM GNU Emacs Configuration
#+AUTHOR: Chu the Pup
#+DESCRIPTION: Chu's Literate Doom GNU Emacs configuration
#+PROPERTY: header-args :tangle yes
#+startup: content
* Org Mode Literate Config (config.org) file

** Preamble

Here's the deets:

*** Org-mode babel tangle setup

There is a property defined on at the top of this file:

#+begin_example emacs-lisp
header-args :tangle yes
#+end_example

This tells emacs to automatically tangle (include) all code blocks in this file when generating the code for the config file (config.el), unless the code block explicitly includes =:tangle no= as the above code block does (or if it is a quote or example block).

*** Usage of quote and example blocks

This is done in order to debug the configuration on my end. However, the use of quote and example blocks also serves as a way of offering an on/off switch to certain blocks of "settings" (blocks beginning in "#+begin_something" and ending in "#+end_something").

** DOOM Emacs stuff

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

+ `doom-font'

+ `doom-variable-pitch-font'

+ `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:

#+begin_example
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
#+end_example

#+begin_example
(setq doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_example

There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

#+begin_example emacs-lisp
(setq doom-theme 'doom-one)
#+end_example

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one

- `use-package!' for configuring packages

- `after!' for running code after a package has loaded

- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.

- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!

Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_example emacs-lisp
(setq user-full-name "John Doe"
      user-mail-address "example@donut.arpa")
#+end_example
** My Config
*** Private Configuration
#+begin_src emacs-lisp
(setq user-full-name "Chu the Pup"
      user-mail-address "chufilthymutt@gmail.com")
#+end_src
*** EMMS
#+begin_src emacs-lisp
(setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
#+end_src

#+begin_src emacs-lisp
(setq emms-source-file-default-directory "~/Music/")
#+end_src
*** IRC (ERC)
Set user information.
#+begin_src elisp :results none
(setq erc-server "localhost"
      erc-nick "chu"
      erc-user-full-name "Chu the Pup")
#+end_src
*** Trash instead of delete
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src
*** Org-Mode
**** Custom org-todo-keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
       '((sequence "TODO(t)" "PROJ(p)" "LOOP(r)" "STRT(s)" "WAIT(w)" "HOLD(h)" "HABIT(H)" "IDEA(i)" "|" "DONE(d)" "KILL(k)")
         (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
         (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))
#+end_src
**** Make Org mode look nicer
#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-pretty-entities t)
#+end_src
**** Custom org capture templates
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-capture-templates
        '(("t" "Personal todo" entry
          (file+headline +org-capture-todo-file "Inbox")
          "* [ ] %?\n%i\n%a" :prepend t)
         ("n" "Personal notes" entry
          (file+headline +org-capture-notes-file "Inbox")
          "* %u %?\n%i\n%a" :prepend t)
         ("j" "Journal" entry
          (file+olp+datetree +org-capture-journal-file)
          "* %U %?\n%i\n%a" :prepend t)
         ("p" "Templates for projects")
         ("pt" "Project-local todo" entry
          (file+headline +org-capture-project-todo-file "Inbox")
          "* TODO %?\n%i\n%a" :prepend t)
         ("pn" "Project-local notes" entry
          (file+headline +org-capture-project-notes-file "Inbox")
          "* %U %?\n%i\n%a" :prepend t)
         ("pc" "Project-local changelog" entry
          (file+headline +org-capture-project-changelog-file "Unreleased")
          "* %U %?\n%i\n%a" :prepend t)
         ("o" "Centralized templates for projects")
         ("ot" "Project todo" entry
          #'+org-capture-central-project-todo-file
          "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
         ("on" "Project notes" entry
          #'+org-capture-central-project-notes-file
          "* %U %?\n %i\n %a" :prepend t :heading "Notes")
         ("oc" "Project changelog" entry
          #'+org-capture-central-project-changelog-file
          "* %U %?\n %i\n %a" :prepend t :heading "Changelog")
         ("b" "(web) Bookmark" plain
          (file+headline +org-capture-bookmarks-file "Inbox")
          "*** %?%i%a" :prepend t))))
#+end_src


**** Custom org directories and files :org:

If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!

***** Custom org root directory :org:

The following will vary, so change it to be whatever your org root directory is/what you want it to be.

I use a directory that I sync between computers with a nextcloud server I run but you don't necessarily have to do that.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-directory
        (concat
         (getenv "HOME")
        "/nextcloud/documents/org/")))
#+end_src

***** Custom org bookmark directory :org:

The following will vary, so change it to be whatever your bookmarks file is/what you want it to be.

I use a document that I track with org roam but you don't necessarily have to do that.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq +org-capture-bookmarks-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004090130-bookmarks.org")))
#+end_src

***** Custom org agenda file :org:

The following will vary, so change it to be whatever your agenda file is/what you want it to be.

I use a document that I track with org roam but you don't necessarily have to do that.

Also, I primarily use a "todo" file rather than an "agenda" file, for agenda ("TODO") items.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-agenda-files
        (list
         (concat
          (getenv "HOME")
          "/nextcloud/documents/org/roam/20221004222223-agenda.org"))))
#+end_src

***** Custom org journal file location :org:

You know the gist by now--change this to whatever you want your file to be.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq +org-capture-journal-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004222230-journal.org")))
#+end_src

***** Custom org notes file location :org:

You know the gist by now--change this to whatever you want your file to be.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq +org-capture-notes-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004222235-notes.org")))
#+end_src

***** Custom org projects file location :org:

You know the gist by now--change this to whatever you want your file to be.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq +org-capture-projects-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004222226-projects.org")))
#+end_src

***** Custom org todo file location :org:

You know the gist by now--change this to whatever you want your file to be.

I primarily use a "todo" file rather than an "agenda" file, for agenda ("TODO") items.

#+begin_src elisp
(with-eval-after-load 'org
  (setq +org-capture-todo-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004221829-todo.org")))
#+end_src

***** Org roam v2 directories and files

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-roam-directory
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/")))
#+end_src

***** Org id custom id location

#+begin_src emacs-lisp
(setq org-id-locations-file
      (concat
       (getenv "HOME")
       "/nextcloud/documents/org/.orgids"))
#+end_src

***** Org-attach custom directory

#+begin_src emacs-lisp
(setq org-attach-id-dir
      (concat
       (getenv "HOME")
       "/nextcloud/documents/org/.attach/"))
#+end_src

***** Org-Cite (oc.el)
****** Org-Cite (oc.el) bibliography location

#+begin_src emacs-lisp
(setq! org-cite-global-bibliography
       (list
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/bib.bib")))
#+end_src

****** Org-Cite (oc.el) CiteProc formatter file directory location

Citation Style Language!

#+begin_src emacs-lisp
(setq org-cite-csl-styles-dir
      (concat
       (getenv "HOME")
       "/nextcloud/documents/org/latex/citeproc-formatters/"))
#+end_src

***** Citar bibliography location

#+begin_src emacs-lisp
(setq citar-bibliography
       (list
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/bib.bib")))
#+end_src

**** Download/capture for Org mode

#+begin_src emacs-lisp
(with-eval-after-load 'org
(require 'org-download)
(add-hook 'dired-mode-hook 'org-download-enable))
#+end_src

**** Org-download image width attribute tag added automatically when images are downloaded

Set in an attempt to stop images being absolutely HUGE after inlining them in an org document with org-download.

#+begin_src emacs-lisp
(setq org-image-actual-width 500)
#+end_src

**** Load package org-pandoc-import after org loads.

#+begin_src emacs-lisp
(use-package! org-pandoc-import :after org)
#+end_src

**** LaTeX classes for org mode with org-latex-classes

Helpful when editing LaTeX documents.

#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

**** A not-stupid way to archive sections of Org documents
By default, using the Org mode archive function 'org-archive-subtree-default' does not capture the higher-level headings a particular subheading was sitting under when it was archived, which makes a mess of the archive file that gets created. Use this instead!
#+begin_example emacs-lisp
;; org-archive-subtree-hierarchical.el
;;
;; version 0.2
;; modified from https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00109.html
;; modified from https://stackoverflow.com/a/35475878/259187
;; In orgmode
;; * A
;; ** AA
;; *** AAA
;; ** AB
;; *** ABA
;; Archiving AA will remove the subtree from the original file and create
;; it like that in archive target:
;; * AA
;; ** AAA
;; And this give you
;; * A
;; ** AA
;; *** AAA
;;
;; Install file to your include path and include in your init file with:
;;
;;  (require 'org-archive-subtree-hierarchical)
;;  (setq org-archive-default-command 'org-archive-subtree-hierarchical)
;;
#+end_example

#+begin_src emacs-lisp
(provide 'org-archive-subtree-hierarchical)
(require 'org-archive)
(defun org-archive-subtree-hierarchical--line-content-as-string ()
  "Returns the content of the current line as a string"
  (save-excursion
    (beginning-of-line)
    (buffer-substring-no-properties
     (line-beginning-position) (line-end-position))))
(defun org-archive-subtree-hierarchical--org-child-list ()
  "This function returns all children of a heading as a list. "
  (interactive)
  (save-excursion
    ;; this only works with org-version > 8.0, since in previous
    ;; org-mode versions the function (org-outline-level) returns
    ;; gargabe when the point is not on a heading.
    (if (= (org-outline-level) 0)
        (outline-next-visible-heading 1)
      (org-goto-first-child))
    (let ((child-list (list (org-archive-subtree-hierarchical--line-content-as-string))))
      (while (org-goto-sibling)
        (setq child-list (cons (org-archive-subtree-hierarchical--line-content-as-string) child-list)))
      child-list)))
(defun org-archive-subtree-hierarchical--org-struct-subtree ()
  "This function returns the tree structure in which a subtree
belongs as a list."
  (interactive)
  (let ((archive-tree nil))
    (save-excursion
      (while (org-up-heading-safe)
        (let ((heading
               (buffer-substring-no-properties
                (line-beginning-position) (line-end-position))))
          (if (eq archive-tree nil)
              (setq archive-tree (list heading))
            (setq archive-tree (cons heading archive-tree))))))
    archive-tree))
(defun org-archive-subtree-hierarchical ()
  "This function archives a subtree hierarchical"
  (interactive)
  (let ((org-tree (org-archive-subtree-hierarchical--org-struct-subtree))
        (this-buffer (current-buffer))
        (file (abbreviate-file-name
               (or (buffer-file-name (buffer-base-buffer))
                   (error "No file associated to buffer")))))
    (save-excursion
      (setq location org-archive-location
            afile (car (org-archive--compute-location
		                   (or (org-entry-get nil "ARCHIVE" 'inherit) location)))
            ;; heading (org-extract-archive-heading location)
            infile-p (equal file (abbreviate-file-name (or afile ""))))
      (unless afile
        (error "Invalid `org-archive-location'"))
      (if (> (length afile) 0)
          (setq newfile-p (not (file-exists-p afile))
                visiting (find-buffer-visiting afile)
                buffer (or visiting (find-file-noselect afile)))
        (setq buffer (current-buffer)))
      (unless buffer
        (error "Cannot access file \"%s\"" afile))
      (org-cut-subtree)
      (set-buffer buffer)
      (org-mode)
      (goto-char (point-min))
      (while (not (equal org-tree nil))
        (let ((child-list (org-archive-subtree-hierarchical--org-child-list)))
          (if (member (car org-tree) child-list)
              (progn
                (search-forward (car org-tree) nil t)
                (setq org-tree (cdr org-tree)))
            (progn
              (goto-char (point-max))
              (newline)
              (org-insert-struct org-tree)
              (setq org-tree nil)))))
      (newline)
      (org-yank)
      (when (not (eq this-buffer buffer))
        (save-buffer))
      (message "Subtree archived %s"
               (concat "in file: " (abbreviate-file-name afile))))))
(defun org-insert-struct (struct)
  "TODO"
  (interactive)
  (when struct
    (insert (car struct))
    (newline)
    (org-insert-struct (cdr struct))))
(defun org-archive-subtree ()
  (org-archive-subtree-hierarchical))
#+end_src

**** Change the default Org archive function to be the not-stupid one

#+begin_src emacs-lisp
(setq org-archive-default-command 'org-archive-subtree-hierarchical)
#+end_src

**** Custom Org Agenda files

Subject to change as projects roll in and out of my purview.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-agenda-files '("~/nextcloud/documents/org/roam/20221004221829-todo.org"
                           "~/nextcloud/documents/org/roam/20220823133453-precalculus_algebra.org"
                           "~/nextcloud/documents/org/roam/20220826102101-chem_1110.org"
                           "~/nextcloud/documents/org/roam/20220726210346-important_dates.org"
                           "~/nextcloud/documents/org/roam/20221004222235-notes.org"
                           "~/nextcloud/documents/org/roam/20221004222230-journal.org"
                           "~/nextcloud/documents/org/roam/20221004222226-projects.org"
                           "~/nextcloud/documents/org/roam/20220822103202-engl_1020.org"
                           "~/nextcloud/documents/org/roam/20221002161620-my_conlang.org")))
#+end_src

*** Visual Changes
**** Fix alpha transparency issues

Sometimes Emacs has issues with transparency. In my case, it goes unusably transparent if I make use of an Xresources file.

You can specify frames to use different levels of transparency depending on whether or not you have Emacs focused (active) or if you've clicked off to another application (inactive).

#+begin_example emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
#+end_example

Or you can just use one number, as so:

#+begin_example emacs-lisp
(set-frame-parameter (selected-frame) 'alpha <both>)
#+end_example

Here's the settings I currently use:

#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha 100)
#+end_src

**** Temporarily convert images that Emacs cannot otherwise display

This will Set Emacs to convert images if they are going to be shown in the GUI. It detects when Emacs is unable to display the image due to lack of compatibility and temporarily converts it, pushing the converted version into memory during display (it gets cleaned up by the garbage collector).

Note: This is a soft dependency of random-splash-image; in turn, you risk being unable to display certain image file types (notably .webp files) if this is disabled.

#+begin_src emacs-lisp
(setq image-use-external-converter t)
#+end_src

**** Random Splash Images
***** Enable random-splash-image

For the plugin 'random-splash-image' which displays a random splash image on each Emacs startup.

#+begin_src emacs-lisp
(require 'random-splash-image)
#+end_src

***** Tell random-splash-image what directory to look for images in.

#+begin_example emacs-lisp
(setq random-splash-image-dir
      (concat
       (getenv "HOME") "/.local/share/random-splash-image-dir/konsticlub/src/"))
#+end_example

I use a more specific one at the moment.

#+begin_src emacs-lisp
(setq random-splash-image-dir
      (concat
       (getenv "HOME") "/.local/share/random-splash-image-dir/chosen-splash-images/src/"))
#+end_src

***** TODO Set multiple directories for random-splash-image
I don't know how to do this yet.
**** Set a random splash image on Emacs startup

#+begin_src emacs-lisp
(with-eval-after-load 'random-splash-image
  (random-splash-image-set))
#+end_src

**** Display line number styling

This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.

Disabled since Doom is handling this okay now without it.

#+begin_example emacs-lisp
(setq display-line-numbers t)
#+end_example

*** Geiser settings

Geiser is an interface to using a proper scheme REPL in a modern Emacs.

#+begin_example emacs-lisp
(setq geiser-repl-startup-time 20000)
(setq geiser-chez-binary "chez")
#+end_example

*** Skeletor settings

Set to wherever you want skeletor to generate new projects by default. Works for all sorts of projects.

#+begin_src emacs-lisp
(setq skeletor-project-directory
      (concat
       (getenv "HOME")
       "/nextcloud/projects/"))
#+end_src

*** Exclude user-specified projects in Projectile

Set multiple ignored project like this:

#+begin_example emacs-lisp
(setq projectile-ignored-projects '("~/.git/"
                                    "~/.config/"
                                    "~/Images/Personal/Private/Shirtless-Pictures-of-Steve-Harvey/"))
#+end_example

And ensure their removal after projectile finishes loading with this:

#+begin_example emacs-lisp
(after! projectile
  (setq projectile-project-root-files-bottom-up
        (remove ".git" projectile-project-root-files-bottom-up)))
#+end_example

If that doesn't work, try setting ignored projects like this:

#+begin_example emacs-lisp
(setq projectile-ignored-projects '("~/.git"))
#+end_example

And if /that/ doesn't work, try this:

#+begin_example emacs-lisp
(setq projectile-globally-ignored-directories "~/.git")
#+end_example

*** ripgrep "rg" fast search to handle projectile project files

Use the faster searcher to handle project files: ripgrep "rg"

#+begin_src emacs-lisp
(when (and (not (executable-find "fd"))
           (executable-find "rg"))
  (setq projectile-generic-command
        (let ((rg-cmd ""))
          (dolist (dir projectile-globally-ignored-directories)
            (setq rg-cmd (format "%s --glob '!%s'" rg-cmd dir)))
          (setq rg-ignorefile
                (concat "--ignore-file" " "
                        (expand-file-name "rg_ignore" user-emacs-directory)))
          (concat "rg -0 --files --color=never --hidden" rg-cmd " " rg-ignorefile))))
#+end_src

*** Enable active presence on Discord for Emacs

*Note:* This will tell anyone on your Discord your current activity status in Emacs—with a pretty hefty amount of detail as well. If you feel like this violates your sense of privacy, either keep it wrapped with

#+begin_quote
#+begin_example
...
#+end_example
#+end_quote

or just delete it entirely.

#+begin_example emacs-lisp
(elcord-mode)
#+end_example

*** EPG: Letting Emacs query for GPG passwords

Allow Emacs to handle queries for gpg passwords.

Disabled for now.

#+begin_example emacs-lisp
(setf epg-pinentry-mode 'loopback)
(defun pinentry-emacs (desc prompt ok error)
  (let ((str (read-passwd
              (concat (replace-regexp-in-string "%22" "\""
                      (replace-regexp-in-string "%0A" "\n" desc)) prompt ": ")))) str))
#+end_example

*** Periodic saving of recent files list (recentf):

Might be broken, disabling for now.

#+begin_example emacs-lisp
(run-at-time nil (* 5 60) 'recentf-save-list)
#+end_example

*** Ledger
**** Ledger file location defaults

#+begin_src emacs-lisp
(setq ledger-schedule-file "~/nextcloud/documents/ledger/ledger-schedule.ledger")
#+end_src

*** Achievements in Emacs

#+begin_src emacs-lisp
(achievements-mode)
#+end_src

*** Grammarly support in flycheck

#+begin_example emacs-lisp
(with-eval-after-load 'flycheck
  (flycheck-grammarly-setup))
#+end_example

*** Round numbers to N decimals in Elisp

from [[https://gergely.polonkai.eu/blog/2014/10/7/rounding-numbers-to-n-decimals-in-emacs.html][Rounding numbers to N decimals in Emacs]] by Gergely Polonkai

#+begin_src emacs-lisp
(defun get-number-at-point ()
  (interactive)
  (skip-chars-backward "0123456789.-")
  (or (looking-at "[0123456789.-]+")
      (error "No number at point"))
  (string-to-number (match-string 0)))

(defun round-number-at-point-to-decimals (decimal-count)
  (interactive "NDecimal count: ")
  (let ((mult (expt 10 decimal-count)))
    (replace-match (number-to-string
              (/
               (fround
                (*
                 mult
                 (get-number-at-point)))
                mult)))))
#+end_src

* Referenced
** [[https://gergely.polonkai.eu/blog/2014/10/7/rounding-numbers-to-n-decimals-in-emacs.html][Rounding numbers to N decimals in Emacs]] by Gergely Polonkai

** https://blog.lazkani.io/posts/bookmark-with-org-capture/

** https://orgmode.org/manual/Capture-templates.html

** [[https://raw.githubusercontent.com/gilbertw1/emacs-literate-starter/master/emacs.org][DOOM Emacs Literate Config]]

By Gilbert. Thanks, Gilbert.

** [[https://github.com/alphapapa/unpackaged.el#ensure-blank-lines-between-headings-and-before-contents][alphapapa/unpackaged.el: A collection of useful Emacs Lisp code that isn't substantial enough to be packaged]]

This is where the 'unpackaged/org-fix-blank-lines' function was sourced from.

By alphapapa. Thanks, alphapapa.

** [[https://stackoverflow.com/a/35475878/259187][org-archive-subtree-hierarchical.el v0.2]]

By [[https://gist.github.com/kepi/2f4acc3cc93403c75fbba5684c5d852d][Kepi]]. Thanks, Kepi.

*** [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00109.html][org-archive-subtree-hierarchical.el v0.1]]

By [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00109.html][Florian Adamsky]]. Thanks, Florian Adamsky.
